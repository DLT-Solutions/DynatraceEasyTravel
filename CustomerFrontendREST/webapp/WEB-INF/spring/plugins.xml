<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
		
	<!-- Define Angular plugins here. Since they have no functionality implemented in java, use  
	com.dynatrace.easytravel.rest.commons.AngularPlugin for class. You need to set only name and description properties. -->

	<bean id="jserrorwhenselectingtravelersplugin" class="com.dynatrace.easytravel.rest.commons.AngularPlugin">
		<property name="name" value="JsErrorWhenSelectingTravelers" />
		<property name="description" value="This is a problem pattern for Angular frontend. Simulates a javascript error that happens when selecting 2 adults + 2 kids in the easy travel angular application." />
	</bean>

	<bean id="usabilityissueplugin" class="com.dynatrace.easytravel.rest.commons.AngularPlugin">
		<property name="name" value="UsabilityIssue" />
		<property name="description" value="This is a problem pattern for Angular frontend. Simulates a situation in which the 'Pay price' button is located in a place that the user does not relate with the action he wants to do (Useful to generate conversion drops)." />
	</bean>

	<bean id="usabilityissueinsmallscreensplugin" class="com.dynatrace.easytravel.rest.commons.AngularPlugin">
		<property name="name" value="UsabilityIssueInSmallScreens" />
		<property name="description" value="This is a problem pattern for Angular frontend. Simulates a situation in which after clicking 'Pay price' button the page scrolls to a position where the 'Book Journey' button is not visible to the user (Useful to generate conversion drops)." />
	</bean>
	
	<bean id="webpagerequestspammingplugin" class="com.dynatrace.easytravel.rest.commons.AngularPlugin">
		<property name="name" value="WebPageRequestSpamming" />
		<property name="description" value="This is a problem pattern for Angular frontend. Turning on this pattern leads on a specific page/view to a much higher amount of XHR JSON requests than before." />
	</bean>

	<bean id="angularbookingerror500" class="com.dynatrace.easytravel.rest.commons.AngularPlugin">
		<property name="name" value="AngularBookingError500" />
		<property name="description" value="This is a problem pattern for Angular frontend. Turning on this pattern leads to the failure of booking with a status of 500." />
	</bean>
	
	<bean id="opentelemetry" class="com.dynatrace.easytravel.rest.commons.AngularPlugin">
		<property name="name" value="OpenTelemetry" />
		<property name="description" value="This is a problem pattern for Angular frontend. Turning on this pattern enables experimental OpenTelemetry support in the Angular app for forwarding OpenTelemetry data to a configurable backend." />
	</bean>
	
	<bean id="bizeventsplugin" class="com.dynatrace.easytravel.rest.commons.AngularPlugin">
		<property name="name" value="BizEventsPlugin" />
		<property name="description" value="This is a problem pattern for Angular frontend. Turning on this pattern enables bizEvents which are sent via the module k's cloudEvent API" />
	</bean>
	
	<!-- Bean which receives generic plugin instances for the frontend -->	
  	<bean id="pluginHolder" class="com.dynatrace.easytravel.spring.PluginHolder">
    	<property name="plugins">
    		<list>
    			<ref bean="jserrorwhenselectingtravelersplugin"/>
    			<ref bean="usabilityissueplugin"/>
    			<ref bean="usabilityissueinsmallscreensplugin"/>
    			<ref bean="webpagerequestspammingplugin"/>
    			<ref bean="angularbookingerror500"/>
    			<ref bean="opentelemetry"/>
    			<ref bean="bizeventsplugin"/>
    		</list> <!-- other plugins can be added via plugin mechanism -->
    	</property> 
  	</bean>
  	

</beans>
