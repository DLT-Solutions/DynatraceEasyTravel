<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"	
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	
	<bean id="dataSourceFactory" class="org.apache.tomcat.jdbc.pool.DataSourceFactory">
	</bean>
	
	<bean id="propDataSource" destroy-method="close"
	    factory-bean="dataSourceFactory"
	    factory-method="createDataSource">
	    <constructor-arg index="0">
	    	<props>
		      <prop key="driverClassName">${config.databaseDriver}</prop>
				<prop key="url">${config.databaseUrl}</prop>
				<prop key="username">${config.databaseUser}</prop>
				<prop key="password">${config.databasePassword}</prop>
				<prop key="jmxEnabled">true</prop>
				
				<!-- Set the number of connections that will be established when the connection pool is started.
			     * Default value is 10.
			     * If this value exceeds {@link #setMaxActive(int)} it will automatically be lowered. -->
				<prop key="initialSize">1</prop>
				
				<!-- The maximum number of active connections that can be allocated from this pool at the same time. The default value is 100 -->				
				<prop key="maxActive">50</prop>

				<!-- The minimum number of established connections that should be kept in the pool at all times. 
			     * The connection pool can shrink below this number if validation queries fail and connections get closed. 
			     * Default value is derived from {@link #getInitialSize()} (also see {@link #setTestWhileIdle(boolean)}
			     * The idle pool will not shrink below this value during an eviction run, hence the number of actual connections
			     * can be between {@link #getMinIdle()} and somewhere between {@link #getMaxIdle()} and {@link #getMaxActive()} -->
				<prop key="minIdle">1</prop>

				<!-- The maximum number of connections that should be kept in the idle pool if {@link #isPoolSweeperEnabled()} returns false.
			     * If the If {@link #isPoolSweeperEnabled()} returns true, then the idle pool can grow up to {@link #getMaxActive}
			     * and will be shrunk according to {@link #getMinEvictableIdleTimeMillis()} setting.
			     * Default value is maxActive:100 -->
				<prop key="maxIdle">10</prop>

                <prop key="removeAbandoned">true</prop>

                <prop key="removeAbandonedTimeout">30000</prop>

		    </props>
	    </constructor-arg>
	 </bean>

	<!--bean id="propDataSource" destroy-method="close"
	      class="org.apache.commons.dbcp.BasicDataSource">
	    <- Connections are taken from the main config file read in above ->
	    <property name="driverClassName" value="${config.databaseDriver}"/>
	    <property name="url" value="${config.databaseUrl}"/>
	    <property name="username" value="${config.databaseUser}"/>
	    <property name="password" value="${config.databasePassword}"/>

		<- Connection-Pool Settings ->
	    <property name="maxActive" value="8"/>
        <property name="maxIdle" value="4"/>
	</bean-->

	<!-- Creates a EntityManagerFactory for use with the Hibernate JPA provider -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="persistenceUnitName" value="easyTravel-Business"/>
	  <property name="jpaVendorAdapter">
		<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
	  </property>

		<property name="dataSource" ref="propDataSource"/>
		<!-- property name="database" value="MYSQL" /-->
		<!-- property name="showSql" value="true" /-->
   </bean>

	<!-- Drives transactions using local JPA APIs -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>


	<!-- allow to define transactional borders via Annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<context:component-scan base-package="com.dynatrace.easytravel.persistence">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
    </context:component-scan>
	
	<bean id="database" class="com.dynatrace.easytravel.persistence.SpringAwareSqlDatabase" />
	
	<!-- transaction template could be used to handle transactions manually, for now we rely on automatic Spring Transaction handling -->
	<!-- not used currently: bean id="transactionTemplate" 
		class="org.springframework.transaction.support.TransactionTemplate">
		 property name="isolationLevelName" value="ISOLATION"
      	<property name="transactionManager" ref="transactionManager"/>
	</bean-->

    <context:mbean-server />
 	
 	<!--Hibernate Statistics JMX
 	NOTE: to enable change value of hibernate.generate_statistics in DatabaseLayer/resources/META-INF/persitence.xml 
 	It can be also changed via jconsole
 	-->
	<bean id="hibernateStatisticsMBean" class="com.dynatrace.easytravel.database.hibernate.HibernateStatisticsFactoryBean">
    	<property name="sessionFactory" ref="entityManagerFactory" />
	</bean>
	
	<bean id="jmxExporter" class="org.springframework.jmx.export.MBeanExporter">
        <property name="beans">
            <map>
                <entry key="Hibernate:application=Statistics" value-ref="hibernateStatisticsMBean"/>
            </map>
        </property>
    </bean>
</beans>
